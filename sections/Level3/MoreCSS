<h1 id='more-css'>More CSS</h1>
<!-- TOC -->

<ul>
<li><a href="#more-css">More CSS</a>

<ul>
<li><a href="#box-model">Box Model</a></li>
<li><a href="#border">Border</a>

<ul>
<li><a href="#border-style">Border-style</a></li>
<li><a href="#border-width">Border-width</a></li>
<li><a href="#border-color">Border-color</a></li>
<li><a href="#border-radius">Border-radius</a></li>
</ul></li>
<li><a href="#margin">Margin</a></li>
<li><a href="#padding">Padding</a></li>
<li><a href="#box-sizing">Box Sizing</a></li>
<li><a href="#display">Display</a>

<ul>
<li><a href="#inline">Inline</a></li>
<li><a href="#block">Block</a></li>
<li><a href="#none">None</a></li>
</ul></li>
<li><a href="#positioning">Positioning</a>

<ul>
<li><a href="#static">Static</a></li>
<li><a href="#relative">Relative</a></li>
<li><a href="#absolute">Absolute</a></li>
<li><a href="#fixed">Fixed</a></li>
<li><a href="#sticky">Sticky</a></li>
</ul></li>
<li><a href="#floating">Floating</a>

<ul>
<li><a href="#clearing">Clearing</a></li>
</ul></li>
<li><a href="#tables">Tables</a></li>
<li><a href="#centering">Centering</a></li>
<li><a href="#lists">Lists</a>

<ul>
<li><a href="#list-style-type">list-style-type</a></li>
<li><a href="#list-style-image">list-style-image</a></li>
<li><a href="#list-style-position">list-style-position</a></li>
</ul></li>
<li><a href="#filters">Filters</a>

<ul>
<li><a href="#blur">Blur</a></li>
<li><a href="#opacity">Opacity</a></li>
<li><a href="#grayscale">Grayscale</a></li>
<li><a href="#sepia">Sepia</a></li>
<li><a href="#invert">Invert</a></li>
<li><a href="#brightness">Brightness</a></li>
<li><a href="#contrast">Contrast</a></li>
<li><a href="#saturate">Saturate</a></li>
</ul></li>
<li><a href="#typography">Typography</a>

<ul>
<li><a href="#text-transform">text-transform</a></li>
<li><a href="#text-decoration">text-decoration</a></li>
<li><a href="#text-align">text-align</a></li>
<li><a href="#line-height">line-height</a></li>
</ul></li>
<li><a href="#error-handling">Error Handling</a></li>
<li><a href="#custom-properties">Custom Properties</a>

<ul>
<li><a href="#creating-variables-inside-elements">Creating variables inside elements</a></li>
<li><a href="#variables-scope">Variables scope</a></li>
<li><a href="#fallback-values-for-var">Fallback values for var()</a></li>
</ul></li>
</ul></li>
</ul>

<!-- /TOC -->
<h2 id='box-model'>Box Model</h2>
<ul>
<li>In HTML and CSS, every element is essentially a box</li>
<li>The box model explains how elements are presented and manipulated in CSS</li>
<li>There are 4 areas in the CSS box model

<ul>
<li>From inside to outside</li>
<li>Content Area</li>
<li>Padding Area</li>
<li>Border Area</li>
<li>Margin Area</li>
</ul></li>
<li>Ex.</li>
</ul>

<p><img src="/sections/Level3/resources/BoxModel-f1ca7bfb.png" title="Box Model" alt="Box Model Image" /></p>

<ul>
<li>Setting width or height sets the content area not the padding, border, or margin areas</li>
</ul>
<h2 id='border'>Border</h2>
<ul>
<li>The border is the thin area between the padding and margin</li>
<li>Essentially, editing this area allows for editing the perimeter of the element</li>
<li>Can work on borders using these properties:<br>

<ol>
<li>border-style</li>
<li>border-color</li>
<li>border-width</li>
<li>border-radius</li>
</ol></li>
<li>Can set images for borders with border-image</li>
</ul>
<h3 id='border-style'>Border-style</h3>
<ul>
<li><strong>border-style</strong> property allows for picking the style of border

<ul>
<li>Ex.

<ul>
<li>dotted</li>
<li>dashed</li>
<li>solid</li>
<li>double</li>
</ul></li>
</ul></li>
</ul>

<p><img src="/sections/Level3/resources/Borders-8afc358f.png" title="Border styles" alt="Borders Image" /></p>
<h3 id='border-width'>Border-width</h3>
<ul>
<li><strong>border-width</strong> allows for specifying the width of hte lines of the border

<ul>
<li>word values are:

<ul>
<li>thin</li>
<li>medium</li>
<li>thick</li>
</ul></li>
<li>length values using &quot;em&quot; or &quot;px&quot; can also be used</li>
</ul></li>
</ul>
<h3 id='border-color'>Border-color</h3>
<ul>
<li><strong>border-color</strong> is utilized to set the color of the border</li>
<li>Default color is the element&#39;s text color</li>
</ul>
<h3 id='border-radius'>Border-radius</h3>
<ul>
<li><strong>border-radius</strong> is used to set rounded corners in the border</li>
<li><p>Value that is passed is the radius of the circle on the corners used to round the border</p></li>
<li><p>Ex.</p></li>
</ul>

<style>
    .border {
        width: 100%;
        height: 100px;
        border-style: dotted solid dashed double;
        border-radius: 10px;
        border-color: red;
    }
</style>

<p class="border">
    Border example with border-radius, border-width, border style, and border-color
</p>
<h2 id='margin'>Margin</h2>
<ul>
<li>A CSS property that is used to add space around an element</li>
<li>Margin adds space outside an element border</li>
<li>Padding on the other hand adds space inside an element border</li>
<li>Margin have 4 properties that can be specified:

<ol>
<li>margin-top</li>
<li>margin-right</li>
<li>margin-bottom</li>
<li>margin-left</li>
</ol></li>
<li>margin is typically utilized to add small amounts of spacing or for centering elements by using &quot;auto&quot;

<ul>
<li>Ex.
<code>
.class {
margin: 0 auto
}
</code></li>
</ul></li>
<li>This makes the top and bottom margin 0 px while letting the browser automatically decide the spacing of the left and right margins for the element</li>
<li>Ex.</li>
</ul>

<style>
    .margin {
        margin: 0 auto;
        width: 300px;
        height: 100px
    }
</style>

<p class="margin">
    Some Test for margin centering using "auto"
</p>

<ul>
<li>Margin is also allowed to have negative values on the properties which makes it extend the opposite way</li>
</ul>
<h2 id='padding'>Padding</h2>
<ul>
<li>Padding is the same as margin except that it adds space to the area inside the element border</li>
<li>Margin adds space outside the element border</li>
<li>Padding adds space inside the element border</li>
<li>Similar to margin, it has 4 properties:

<ol>
<li>padding-top</li>
<li>padding-right</li>
<li>padding-bottom</li>
<li>padding-left</li>
</ol></li>
<li>Ex.</li>
</ul>

<style>
    .padding {
        width: 300px;
        height: 300px;
        padding: 30px 30px;
        background-color: orange;
    }
</style>

<p class="padding">
    Some text to demonstrate padding
</p>
<h2 id='box-sizing'>Box Sizing</h2>
<ul>
<li>By default, the browsers calculate width and height of an element before the padding, border, and margin</li>
<li>It gets complicated so there is a &quot;box-sizing&quot; property that allows for 2 property values:

<ol>
<li>border-box</li>
<li>content-box</li>
</ol></li>
<li>&quot;border-box&quot; changes the box-sizing such that the width and height calculation include the padding and the border</li>
<li>Recommended to &quot;reset&quot; the CSS for every element to this setting since it is more intuitive

<ul>
<li>Ex.
<code>
*, *::before, *::after {
box-sizing: border-box;
}
</code></li>
</ul></li>
<li>Ex.</li>
</ul>

<style>
    .border-box {
        width: 300px;
        height: 100px;
        box-sizing: border-box;
        background-color: pink;
    }
</style>

<p class="border-box">
    Example testing out "border-box"
</p>
<h2 id='display'>Display</h2>
<ul>
<li>&quot;Display&quot; property determines how the element is displayed by the browser</li>
<li>3 types of display elements (excluding &quot;grid&quot;, &quot;flex&quot;, &quot;table&quot;)

<ol>
<li>block</li>
<li>inline</li>
<li>none</li>
</ol></li>
</ul>
<h3 id='inline'>Inline</h3>
<ul>
<li>With &quot;inline&quot; as the property value, the elements don&#39;t have any margin or padding applied as well as height and width</li>
<li>It appears &quot;inline&quot; with the elements that precede and come after it</li>
</ul>
<h3 id='block'>Block</h3>
<ul>
<li>Some elements are automatically set as &quot;block&quot; elements by the browser</li>
<li>Block elements are those that take up 100% of the width of the screen</li>
<li>They also stack on top of each other when placed one after another </li>
<li>The width and height properties are actually utilized and can also set the margin and padding</li>
</ul>
<h3 id='none'>None</h3>
<ul>
<li>Display &quot;none&quot; hides the visibility of the element on the page</li>
<li>The element will still be in the HTML code, but will not be rendered by the browser</li>
</ul>
<h2 id='positioning'>Positioning</h2>
<ul>
<li>Property that determines where elements appear on the screen and how they appear</li>
<li>Can have 5 values:

<ol>
<li>static</li>
<li>relative</li>
<li>absolute</li>
<li>fixed</li>
<li>sticky</li>
</ol></li>
</ul>
<h3 id='static'>Static</h3>
<ul>
<li>This is the default setting that follows the normal page structure created from and HTML document</li>
</ul>
<h3 id='relative'>Relative</h3>
<ul>
<li>Allows for positioning using 4 properties:

<ol>
<li>top</li>
<li>left</li>
<li>right</li>
<li>bottom</li>
<li>Called offset properties tha accept a length as value</li>
</ol></li>
<li>Position relative allows for positioning the element relative to the parent element that is containing it</li>
</ul>

<p><img src="/sections/Level3/resources/PositionRelative-611318fa.png" title="Position Relative" alt="Relative Position Image" /></p>

<ul>
<li>Here we can see that the .box class (yellow) can be specified its position relative to the parent container which is the pink box</li>
</ul>
<h3 id='absolute'>Absolute</h3>
<ul>
<li>Position absolute takes the element outside of the normal HTML flow and allows for manual positioning</li>
<li>Only the (x, y) starting point is preserved

<ul>
<li>The starting point is the starting point of the closest container that is not static</li>
</ul></li>
</ul>

<p><img src="/sections/Level3/resources/PositionAbsolute-9bcbb718.png" title="Position Absolute" alt="Absolute Position Image" /></p>
<h3 id='fixed'>Fixed</h3>
<ul>
<li>Position fixed is the same as position absolute except that the starting coordinates (x, y) are always positioned relative to the window
instead of the first non-static container</li>
<li>Also fixed elements are not affected by scrolling, they will remain on the page even if scrolling occurs</li>
</ul>
<h3 id='sticky'>Sticky</h3>
<ul>
<li>Position sticky is the same as fixed except that it stays at the top of the screen when the screen&#39;s scrolling has reached that element&#39;s scrolling point</li>
<li>This means that it will act like static until its scrolling point is reached and then act like fixed at the top of the screen if the user keeps scrolling</li>
</ul>
<h2 id='floating'>Floating</h2>
<ul>
<li>Floating allows you to remove an element from the normal page flow and used to be the old way to create &quot;modern&quot; layouts

<ul>
<li>Kind of not utilized as much because of &quot;Grid&quot; and &quot;Flexbox&quot;</li>
</ul></li>
<li>Supports 3 values:

<ol>
<li>left</li>
<li>right</li>
<li>none (default)</li>
</ol></li>
<li>Normally, the browser renders things like imgs and spans inline together one after another, meaning imgs will show in the middle of the text or not formatted

<ul>
<li>Can be fixed with floats</li>
<li>Ex.
<img src="/sections/Level3/resources/Floating-aef239ff.png" title="Floating" alt="Floating Image" /></li>
</ul></li>
<li>Floated elements are removed from the normal flow of the page and the content flows around it</li>
</ul>
<h3 id='clearing'>Clearing</h3>
<ul>
<li>Floating multiple elements will make them just stack next to each other horizontally

<ul>
<li>If space runs out at it will start a new line</li>
</ul></li>
<li>There is a property called &quot;clear&quot; that remedy&#39;s this and allows for horizontally floated elements to be stacked vertically</li>
<li>Ex.
<img src="/sections/Level3/resources/Clearing-c43d483d.png" title="Clearing" alt="Clearing Image" /></li>
<li>For clearing use:

<ul>
<li>&quot;left&quot; to clear left floats</li>
<li>&quot;right&quot; to clear right floats</li>
<li>&quot;both&quot; to clear both left and right flaots</li>
<li>&quot;none&quot; (default)</li>
</ul></li>
</ul>
<h2 id='tables'>Tables</h2>
<ul>
<li>Tables used to be heavily utilized to create fancy page layouts but are not really utilized except for creating tables because of &quot;grid&quot; and &quot;flexbox&quot;</li>
<li>Can easily style every other row to have a different color utilizing :nth_child(odd) or :nth_child(even) selector</li>
<li>Ex.</li>
</ul>

<style>
    table, th, td {
        border: 1px solid #333;
    }

    tbody tr:nth-child(odd) {
        background-color: #af47ff;
    }
</style>

<table>
  <thead>
    <tr>
      <th scope="col">Name</th>
      <th scope="col">Age</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th scope="row">Flavio</th>
      <td>36</td>
    </tr>
    <tr>
      <th scope="row">Roger</th>
      <td>7</td>
    </tr>
    <tr>
      <th scope="row">Syd</th>
      <td>10</td>
    </tr>
  </tbody>
</table>
<h2 id='centering'>Centering</h2>
<ul>
<li>Centering is normally a confusing thing without the aid of CSS grid and Flexbox</li>
<li>For centering horizontally:

<ul>
<li>For text:

<ul>
<li>Just set &quot;text-align&quot; to center which automatically centers all text</li>
<li>Ex.
<code>
p {
text-align: center
}
</code></li>
</ul></li>
<li>For block elements:

<ul>
<li>Set the width of the element and then set margin to &quot;0 auto&quot;</li>
<li>Ex.
<code>
div {
width: 50%;
margin: 0 auto;
}
</code></li>
</ul></li>
</ul></li>
</ul>
<h2 id='lists'>Lists</h2>
<ul>
<li>Lists can be styled by CSS using the following properties:

<ul>
<li>list-style-type</li>
<li>list-style-image</li>
<li>list-style-position</li>
</ul></li>
</ul>
<h3 id='list-style-type'>list-style-type</h3>
<ul>
<li>&quot;list-style-type&quot; is used to set a predefined marker such as:

<ul>
<li>&quot;square&quot;</li>
<li>&quot;disc&quot;</li>
<li>&quot;circle&quot;</li>
</ul></li>
</ul>
<h3 id='list-style-image'>list-style-image</h3>
<ul>
<li>&quot;list-style-image&quot; can be used to bring in a custom image marker</li>
</ul>
<h3 id='list-style-position'>list-style-position</h3>
<ul>
<li>&quot;list-style-position&quot; lets you add a marker inside or outside (default) the list content</li>
<li><p>This brinsg the marker in the flow of the page instead of outside of it</p></li>
<li><p>Ex. Using the list-style-type = circle and list-style-posion = inside</p></li>
</ul>

<style>
    .li-custom {
        list-style-type: circle;
        list-style-position: inside;
    }
</style>

<ul>
    <li class="li-custom">
        <span>item</span>
    </li>
    <li class="li-custom">
        <span>item</span>
    </li>
    <li class="li-custom">
        <span>item</span>
    </li>
    <li class="li-custom">
        <span>item</span>
    </li>
</ul>
<h2 id='filters'>Filters</h2>
<ul>
<li>Filters allow for &quot;photoshop&quot; like operations onto the elements</li>
<li>Normally in photoshop it gets applied to only images, but it can be applied to any element</li>
<li>The different filter values are:

<ul>
<li>blur()</li>
<li>opacity()</li>
<li>grayscale()</li>
<li>sepia()</li>
<li>invert()</li>
<li>brightness()</li>
<li>saturate()</li>
</ul></li>
</ul>
<h3 id='blur'>Blur</h3>
<ul>
<li>Bluring merges the pixels together to blur what gets rendered</li>
<li>Pass in a length value that specifies the blur radius</li>
<li>Ex.</li>
</ul>

<style>
    .filterblur {
        filter: blur(2px);
    }
</style>

<div>
    <img class="filterblur" src="./resources/coffeefilter.jpg" />
</div>
<h3 id='opacity'>Opacity</h3>
<ul>
<li>Takes a value from 0 - 1 or percentage that determines the image transparency</li>
<li>There is an &quot;opacity&quot; property, but setting opacity in this manner is better because some implementations are hardware accelerated</li>
<li>Ex.</li>
</ul>

<style>
    .filteropacity {
        filter: opacity(0.4);
    }
</style>

<div>
    <img class="filteropacity" src="./resources/coffeefilter.jpg" />
</div>
<h3 id='grayscale'>Grayscale</h3>
<ul>
<li>Takes a value from 0 - 1 or 0% - 100% which determines how gray the element becomes</li>
<li>Ex.</li>
</ul>

<style>
    .filtergrayscale {
        filter: grayscale(1.0);
    }
</style>

<div>
    <img class="filtergrayscale" src="./resources/coffeefilter.jpg" />
</div>
<h3 id='sepia'>Sepia</h3>
<ul>
<li>Takes a value from 0 - 1 or 0% - 100% which determines how much of the sepia filter gets added</li>
<li>Ex.</li>
</ul>

<style>
    .filtersepia {
        filter: sepia(1.0);
    }
</style>

<div>
    <img class="filtersepia" src="./resources/coffeefilter.jpg" />
</div>
<h3 id='invert'>Invert</h3>
<ul>
<li>Takes a value from 0 - 1 or 0% - 100% that determines the amount of inversion</li>
<li>0.5 or 50% of inversion will always result in a gray image because 50% is in the middle of the color wheel</li>
<li>Ex.</li>
</ul>

<style>
    .filterinvert {
        filter: invert(1.0);
    }
</style>

<div>
    <img class="filterinvert" src="./resources/coffeefilter.jpg" />
</div>
<h3 id='brightness'>Brightness</h3>
<ul>
<li>Takes a value from 0 - 1 or 0% - 100% that determines how bright the image is and can reach a total white element greater than 100%</li>
<li>Ex.</li>
</ul>

<style>
    .filterbrightness {
        filter: brightness(0.2);
    }
</style>

<div>
    <img class="filterbrightness" src="./resources/coffeefilter.jpg" />
</div>
<h3 id='contrast'>Contrast</h3>
<ul>
<li>Takes a value from 0 - 1 or 0% - 100% that adds contrast to the image</li>
<li>Values greater than 100% adds more contrast to the image</li>
<li>Ex.</li>
</ul>

<style>
    .filtercontrast {
        filter: contrast(2.0);
    }
</style>

<div>
    <img class="filtercontrast" src="./resources/coffeefilter.jpg" />
</div>
<h3 id='saturate'>Saturate</h3>
<ul>
<li>Takes in a value from 0 - 1 or 0% - 100% that alters the saturation of the image where 100% gives an unchanged image and anything more than 100% adds more saturation</li>
<li>Ex.</li>
</ul>

<style>
    .filtersaturation {
        filter: saturate(3.0);
    }
</style>

<div>
    <img class="filtersaturation" src="./resources/coffeefilter.jpg" />
</div>
<h2 id='typography'>Typography</h2>
<ul>
<li>There are some CSS properties that get applied to typography</li>
<li>Here are a few of them:

<ul>
<li>text-transform</li>
<li>text-decoration</li>
<li>text-align</li>
<li>line-height</li>
</ul></li>
</ul>
<h3 id='text-transform'>text-transform</h3>
<ul>
<li>Allows for transforming the case of the text</li>
<li>There are 4 possible values:

<ol>
<li>Capitalize - capitalizes the first letter of each word</li>
<li>Uppercase - makes all of the lettrs uppercasee</li>
<li>Lowercase - makes all of the letters lowercase</li>
<li>None - applies no changes but can override parent&#39;s text-transform styles to prevent inheriting</li>
</ol></li>
</ul>
<h3 id='text-decoration'>text-decoration</h3>
<ul>
<li>Used to add decorations to the text</li>
<li>Can be combined with additional decorations and color </li>
</ul>

<style>
    .text-deco {
        text-decoration: underline wavy red;
    }
</style>

<p class="text-deco">
    Example with text-decoration "underline wavy red"
</p>
<h3 id='text-align'>text-align</h3>
<ul>
<li>Changes where the text starts or the origin (0, 0) of the box that contains it</li>
<li>Possible values are:

<ul>
<li>start</li>
<li>end</li>
<li>left</li>
<li>center</li>
<li>justify</li>
</ul></li>
<li>Ex.</li>
</ul>

<style>
    .text-al {
        text-align: center;
    }
</style>

<p class="text-al">
    Example with text-align "center"
</p>
<h3 id='line-height'>line-height</h3>
<ul>
<li>Allows you to change the height of the spacing between each line</li>
</ul>
<h2 id='error-handling'>Error Handling</h2>
<ul>
<li>Error handling in CSS is different from that of traditional languages such as Javascript</li>
<li>Normally in languages like Javascript, when an error is reached, the program stops and then an error message is printed out

<ul>
<li>In CSS, the line that is errored is skipped and the next readable line is skipped as well</li>
</ul></li>
<li>Ex.
<code>
p {
font-size: 20px
color: black;
border: 1px solid black;
}
</code></li>
<li>Here font-size and color are skipped, but the border rule is kept</li>
</ul>
<h2 id='custom-properties'>Custom Properties</h2>
<ul>
<li>CSS allows for defining variables, but they work a bit differently than traditional variables such as those in Javascript</li>
<li>Setting variables centralized in a file is useful because it allows for setting consistent definitions across all CSS files</li>
<li>Setting variables are done by prepending &quot;--&quot; to a variable name</li>
<li>Ex.
<code>
:root {
--primary-color: yello;
}
</code></li>
<li>Can access variable using &quot;url()&quot;</li>
<li>Limited in that the variable value can only be valid CSS value</li>
</ul>
<h3 id='creating-variables-inside-elements'>Creating variables inside elements</h3>
<ul>
<li>Variables can be defined within any element</li>
<li>Ex.
```
:root {
--default-color: red;
}</li>
</ul>

<p>body {
  --default-color: red;
}</p>

<p>main {
  --default-color: red;
}</p>

<p>p {
  --default-color: red;
}</p>

<p>span {
  --default-color: red;
}</p>

<p>a:hover {
  --default-color: red;
}
```
* Depending on where it was defined, the scope of the variable changes</p>
<h3 id='variables-scope'>Variables scope</h3>
<ul>
<li>The scope of a variable is avaiable to that selector and to all of the children of that selector</li>
<li>Ex.
<code>
.class {
--variable: value;
}
</code></li>
<li>The variable is available to all of its children</li>
<li>Can set variables in the &quot;:root&quot; selector which is the root of the DOM elements

<ul>
<li>Means the variable will be available to every element in the page</li>
</ul></li>
<li>Variables can also be reassigned</li>
<li>CSS variables are also case sensitive</li>
</ul>
<h3 id='fallback-values-for-var'>Fallback values for var()</h3>
<ul>
<li>Fallback values for var() can be set by adding a second parameter to the function</li>
<li>Ex.
<code>
.class {
margin: var(--variable, 30px);
}
</code></li>
</ul>
