<h1 id='javascript-basics'>Javascript Basics</h1>
<!-- TOC -->

<ul>
<li><a href="#javascript-basics">Javascript Basics</a>

<ul>
<li><a href="#introduction-to-javascript">Introduction to Javascript</a></li>
<li><a href="#javascript-history">Javascript History</a></li>
<li><a href="#javascript-syntax-intro">Javascript Syntax Intro</a>

<ul>
<li><a href="#white-space">White Space</a></li>
<li><a href="#case-sensitive">Case Sensitive</a></li>
<li><a href="#literals">Literals</a></li>
<li><a href="#identifiers">Identifiers</a></li>
<li><a href="#comments">Comments</a></li>
<li><a href="#semicolons">Semicolons</a></li>
</ul></li>
<li><a href="#values">Values</a></li>
<li><a href="#variables">Variables</a>

<ul>
<li><a href="#const">const</a></li>
<li><a href="#let">let</a></li>
</ul></li>
<li><a href="#types">Types</a></li>
<li><a href="#basic-expressions">Basic Expressions</a></li>
<li><a href="#operators">Operators</a></li>
<li><a href="#precedence-rules">Precedence Rules</a></li>
<li><a href="#comparison-operators">Comparison Operators</a></li>
<li><a href="#conditionals">Conditionals</a></li>
</ul></li>
</ul>

<!-- /TOC -->
<h2 id='introduction-to-javascript'>Introduction to Javascript</h2>
<ul>
<li>Javascript is mainly used to create:

<ul>
<li>Websites</li>
<li>Web applications</li>
<li>Server-side applications using NodeJS</li>
</ul></li>
<li>Can be also used to create mobile applications, create programs for microcontrollers, or create smartwatch applications</li>
<li>Javascript features are:

<ul>
<li>high level - provides abstractions to lower level code

<ul>
<li>Has garbage collection, provides abstracts and constructs such as classes that allow you to deal with powerful variables and objects</li>
</ul></li>
<li>dynamic - executes things at runtime such as:

<ul>
<li>dynamic typing</li>
<li>late binding</li>
<li>reflection</li>
<li>functional programming</li>
<li>object runtime alteration</li>
<li>closures</li>
</ul></li>
<li>dynamically typed - variables don&#39;t enforce types, can reassign values of different types</li>
<li>loosely typed - no enforcing of types on a variable, but leads to issues with type safety and type checking</li>
<li>interpreted - unlike C++ or Java, Javascript is interpreted meaning that it doesn&#39;t neeed to compile the code into machine code</li>
<li>multi-paradigmed - Javascript does not enforce a certain programming style

<ul>
<li>Unlike C which enforces an imperative style or Java which enforces an object-oriented style</li>
<li>Javascript gives you the option to program in an object-oriented style using ES6 classes or a functional style with first-class functions</li>
</ul></li>
</ul></li>
</ul>
<h2 id='javascript-history'>Javascript History</h2>
<ul>
<li>First scripting language natively supported by web browsers that gives it an advantage

<ul>
<li>Other languages need to be compiled into Javascript</li>
</ul></li>
<li>Javascript now has grown past just the client-side applications by being able to write server-side code as well as power databases, develop embedded applications, mobile apps, etc.</li>
</ul>
<h2 id='javascript-syntax-intro'>Javascript Syntax Intro</h2><h3 id='white-space'>White Space</h3>
<ul>
<li>Javascript doesn&#39;t care about the amount of spaces or line breaks</li>
<li>Stick to a style and use linters such as <strong>Prettier</strong></li>
</ul>
<h3 id='case-sensitive'>Case Sensitive</h3>
<ul>
<li>Javascript is case sensitive</li>
<li>&quot;Something&quot; is not the same as &quot;something&quot;</li>
</ul>
<h3 id='literals'>Literals</h3>
<ul>
<li>The values that is written into the source code</li>
<li>Can be things like numbers, strings, arrays, functions, objects, etc.</li>
</ul>
<h3 id='identifiers'>Identifiers</h3>
<ul>
<li>Sequence of characters that are used to identify a variable, function, or object</li>
<li>Characters include: letters, dollar sign, underscore, numbers</li>
</ul>
<h3 id='comments'>Comments</h3>
<ul>
<li>Single line comments using &quot;//&quot;</li>
<li>Ex.
<code>
// This is a comment
function test() {
//...
}
</code></li>
<li>Multi-line comments using &quot;/* */&quot;</li>
<li>Ex.
<code>
/* This is
a multi
line
comment
*/
</code></li>
</ul>
<h3 id='semicolons'>Semicolons</h3>
<ul>
<li>In Javascript, semicolons are necessary at the end of each line, but now Javascript intepreters are smart enough to add semi-colons on the end of each line</li>
<li>Not necessary unlesss it must be absolutely specified</li>
</ul>
<h2 id='values'>Values</h2>
<ul>
<li>&quot;hello&quot; is a value and is of type &quot;string&quot;</li>
<li>Values have a type such as &quot;string&quot; or &quot;number&quot; but each type has their own characteritics</li>
<li>When needing to save a value, you create a variable and pass the reference of the value to the variable

<ul>
<li>The variable has a name and the value is what is stored inside it so that you can later access the value through the variable name</li>
</ul></li>
</ul>
<h2 id='variables'>Variables</h2>
<ul>
<li>A variable is a reference to a value using a label

<ul>
<li>This is done to reference it and use it later in a program</li>
</ul></li>
<li>3 ways to declare a variable

<ul>
<li>let</li>
<li>const</li>
<li>var</li>
</ul></li>
</ul>
<h3 id='const'>const</h3>
<ul>
<li>&quot;const&quot; refers to a constant reference to a value

<ul>
<li>This means that the value of the variable cannot change</li>
</ul></li>
<li>&quot;const&quot; doesn&#39;t mean constant meaning that the value cannot change

<ul>
<li>It just means that it cannot be reassigned</li>
<li>Objects that are referenced with const can have their internal values changed</li>
</ul></li>
</ul>
<h3 id='let'>let</h3>
<ul>
<li>A way of declaring variable that allows for changing the value of the variable</li>
<li>Better to use const if you know that the variable won&#39;t be reassigned since it leads to less code bugs</li>
</ul>
<h2 id='types'>Types</h2>
<ul>
<li>When assigning a value to a variable, you give it a &quot;type&quot;</li>
<li>Since Javascript is loosely typed, the type of the variable can be reassigned to a host of another type</li>
<li>2 main types:

<ol>
<li>Primitive types

<ul>
<li>Numbers</li>
<li>Strings</li>
<li>Booleans</li>
<li>Symbols</li>
<li>null</li>
<li>undefined</li>
</ul></li>
<li>Object types

<ul>
<li>Anything that is not a primitive type </li>
<li>Objects have special properties and methods that can be used to act on those properties</li>
</ul></li>
</ol></li>
</ul>
<h2 id='basic-expressions'>Basic Expressions</h2>
<ul>
<li>Expression is a single unit of Javascript code that the Javascript engine can evaluate and return a value</li>
<li>Different types of basic expressions

<ul>
<li>Primary - just one type or value</li>
<li>Arithmetic - involving a variable and an operator and result in a number</li>
<li>String - expressions that result in strings</li>
<li>Logical - expressions that use logical operators and resolve into a boolean value </li>
</ul></li>
</ul>
<h2 id='operators'>Operators</h2>
<ul>
<li>Operators take in 1 - 3 operands to combine them in to a more complicated expression</li>
<li>Examples of binary operators (2 operands)

<ul>
<li>&quot;=&quot; - assignment</li>
<li>&quot;+&quot; - addition

<ul>
<li>Doubles as a string concatenator when dealing with strings</li>
</ul></li>
<li>&quot;-&quot; - subtraction</li>
<li>&quot;/&quot; - division

<ul>
<li>Dividing by 0 gives an &quot;Infinity&quot; value</li>
</ul></li>
<li>&quot;%&quot; - Remainder 

<ul>
<li>Remainder with 0 gives &quot;NaN&quot; (not a number)</li>
</ul></li>
<li>&quot;*&quot; - multiplication</li>
<li>&quot;**&quot; - exponentation or power</li>
</ul></li>
</ul>
<h2 id='precedence-rules'>Precedence Rules</h2>
<ul>
<li>When there are multiple operators within one expression, there are precedence rules that come into play</li>
<li>In this table is the operators with their precedence (higher the in the table means higher precedence)</li>
</ul>

<table>
    <tr>
        <th>
            Operator
        </th>
        <th>
            Description
        </th>
    </tr>
    <tr>
        <td>
            */%
        </td>
        <td>
            Multiplication/Division/Remainder
        </td>
    </tr>
    <tr>
        <td>
            +-
        </td>
        <td>
            Addition/Subtraction
        </td>
    </tr>
    <tr>
        <td>
            =
        </td>
        <td>
            Assignment
        </td>
    </tr>
</table>

<ul>
<li>Operators that are on the same precedence level get executed sequentially from left to right</li>
</ul>
<h2 id='comparison-operators'>Comparison Operators</h2>
<ul>
<li>These operators are used for comparing the values of 2 operands</li>
<li>It always returns a boolean value</li>
<li>4 equality operators

<ul>
<li>&quot;===&quot; - equal to and type is equal</li>
<li>&quot;!==&quot; - not equal to and type is not equal</li>
<li>&quot;==&quot; - equal to</li>
<li>&quot;!=&quot; - not equal to</li>
</ul></li>
<li>4 inequality operators

<ul>
<li>&quot;&gt;&quot; - greater than</li>
<li>&quot;&lt;&quot; - less than</li>
<li>&quot;&gt;=&quot; greater than or equal to</li>
<li>&quot;&lt;=&quot; less than or equal to</li>
</ul></li>
</ul>
<h2 id='conditionals'>Conditionals</h2>
<ul>
<li>Conditionals allow you to take one route or another depending on the result of an expression</li>
<li>Conditional checks whether the result of the expression is true or false 

<ul>
<li>If number is passed, it is always true unless the number is 0</li>
<li>If string is passed, it is always true unless it is the empty string &quot;&quot;</li>
</ul></li>
<li>After the conditional a statement must be added to execute

<ul>
<li>Put inside things called &quot;blocks&quot; which are represented by the curly braces &quot;{}&quot;</li>
</ul></li>
<li>An &quot;Else&quot; statement can be added to the second part of the if statement for executing statements in the case that the conditional is false</li>
</ul>
